traceback()
debug(lm)# evalua paso a paso una funcion
lm(y ~ x)
options(error = recover)
read.csv('perritos')
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrr <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- list.files()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = T)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd()
setwd("old.dir")
setwd("old.dir", recursive= TRUE)
setwd(old.dir)
delete("testdir")
unlink("testdir")
unlink("testdir", recursive= TRUE)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, lenght=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, timea = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <_ num_vect < 1
tf <- num_vect < 1
tf
k <- num_vector >= 6
k <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Joshua Velez")
my_name
paste(my_name, " ")
paste(my_name,collapse= " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y","Z"), sep= "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf/Inf
inf-inf
Inf- Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
[c(3,5,7)]
[ c(3,5,7)]
c(3,5,7)[x]
x[c(3,5,7)]
x[0]
x[c(3000)]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect <- c(11,2,NA)
vect2(11,2,NA)
c(11, 2, NA)
info()
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect("bar")
vect['bar']
vect[c("foo", "bar")]
str(str)
str(lm)
str(ls)
x <- rnorm(100)
str(x)
summary(x)
f <-gl(40, 10)str(f)
f <-gl(40, 10)
str(f)
?gl
summary(f)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
str(s)
x <- rnorm(10)
x
y <- rnorm(10,50,5)
y
summary(x)
summary(y)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
normal1 <- rnorm(10000)
normal2 <- rnorm(10000, 10, 5)
hist(normal1)
summary(normal1)
hist(normal2)
summary(normal2)
set.seed(1)
rpois(10,1)
rpois(10,1)
poisson1 <- rpois(10000, 1)
poisson2 <- rpois(10000, 10)
hist(poisson1)
hist(poisson2)
ppois(2,2)
ppois(4,2)
ppois(6,2)
hist(rpois(10000,2))
?ppois
hist(rpois(10000,2))
ppois(0,2)
for( i in 1:10){
print(ppois(i, lambda)-ppois (i-1. lambda))
}
hist(runif(10000,10,20))
hist(runif(200000000,10,20))
hist(runif(1000000000,10,20))
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
z <- 0.5 + 2 * x
plot(x,z)
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- (1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !< 7
7 != 5
5 == 7
5 !== 7
5 != 7
7 !== 5
5 = 7 !FALSE
info()
5 !<= 7
5 "!<=" 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints <=0)
any(ints <0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
?%%
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(std,c(1.4,3.6,7.9,8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "what", ",", "are", "you", "doing", "today", "?"))
submit()
mad_libs(place = "Puebla", adjustive = "great", noun = "cat")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
heas("Duration")
head("Duration")
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace= TRUE)
sample(1:6, 4, replace= TRUE)
sample(1:6, 10)
sample(1:6, 10, replace= FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100, sd=25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim= c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(10)
x <- rbinom(100,1, 0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
plot(x,y, main="Modelo Lineal", col=2)
plot(x,y, main="Modelo Lineal", col="Dark red")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y, main = "Modelo Poisson", col" Purple"
(x,y, main = "Modelo Poisson", col" Purple")
plot(x,y, main = "Modelo Poisson", col" Purple")
plot(x,y, main = "Modelo Poisson", col=" Purple")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y, main = "Modelo Poisson", col=" Purple")
set.seed(1)
sample(1:10, 4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
system.time(readLines("http://www.fcfm.buap.mx"))
hilbert <- function(n){
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
?svd
system.time(svd(x))
system.time(x <- hilbert(1000))
system.time(svd(x))
x <- -4l
x
x <- -4L
class(x)
x <- 4L
class(x)
x <- c(4,TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2,"a","b", TRUE)
x[[2]]
class(x[[2]])
x <- c(17,14,4,5,13,12,10)
x[x >= 11] <- 4
x
x[x > 4] <- 10
x
x[x < 10] <- 4
x
x[x == 10] <- 4
x
r
r
airquality
s <- split(airquality, airquality$Ozone)
s
k <- airquality("Ozone")
data(airquality)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
subset(airquality, Day == 1, select = -Temp)
subset(airquality, select = Ozone:Wind)
subset(airquality, Temp > 90, Ozone >31,r select = c(Ozone, Temp))
subset(airquality, Temp > 90, Ozone >31, select = c(Ozone, Temp))
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Caso2")
stop("resultado invalido")
}
source("rankingcompleto")
source("rankingcompleto.r")
rankingcompleto("Neumon√≠a","peor")
rankingcompleto("Neumonia","peor")
rankingcompleto("Falla Cardiaca",7)
